2.1 使用多个界定符分割字符串
	例：re.split(r'[;,\s]\s*', line)
	讨论：函数 re.split() 是非常实用的，因为它允许你为分隔符指定多个正则模式。比如，在
      上面的例子中，分隔符可以是逗号，分号或者是空格，并且后面紧跟着任意个的空格。只要这
      个模式被找到，那么匹配的分隔符两边的实体都会被当成是结果中的元素返回。
2.2 字符串开头或结尾匹配
	例：检查字符串开头或结尾的一个简单方法是使用 str.startswith() 或者是str.endswith()
	讨论：如果你想检查多种匹配可能，只需要将所有的匹配项放入到一个元组中去，然后传
    	给 startswith() 或者 endswith() 方法。这样婶的  name.startswith(('http:', 'https:', 'ftp:'))
2.3 用 Shell 通配符匹配字符串
	例：from fnmatch import fnmatch, fnmatchcase
		[addr for addr in addresses if fnmatchcase(addr, '54[0-9][0-9] *CLARK*')]
	讨论：fnmatch() 函数匹配能力介于简单的字符串方法和强大的正则表达式之间。如果在
		数据处理操作中只需要简单的通配符就能完成的时候，这通常是一个比较合理的方案。
2.4 字符串匹配和搜索
	例：import re 强大的re。 match()总会从开头匹配，findall()可以从任意位置匹配。
2.5 字符串搜索和替换
	例：简单的直接replace()，复杂的re.sub()
2.6 字符串忽略大小写的搜索替换
	例：re.findall('python', text, flags=re.IGNORECASE) IGNORECAS可忽略大小写
	讨论：def matchcase(word):
      def replace(m):
      text = m.group()
      if text.isupper():
      return word.upper()
      elif text.islower():
      return word.lower()
      elif text[0].isupper():
      return word.capitalize()
      else:
      return word
      return replace
        re.sub('python', matchcase('snake'), text, flags=re.IGNORECASE) 竟然可以用装饰器！
2.7 最短匹配模式
	例：re.compile(r’\”(.*?)\”’)
	讨论：(.*?)常用的，不用解释了
2.8 多行匹配模式
	例：re.compile(r'/\*(.*?)\*/', re.DOTALL)
	讨论：re.compile() 函数接受一个标志参数叫 re.DOTALL ，在这里非常有用。它可以让正则
		表达式中的点 (.) 匹配包括换行符在内的任意字符。
2.9 将 Unicode 文本标准化
	例：import unicodedata
      unicodedata.normalize('NFD', s1)
	讨论：unicode编码问题如果在NLP上可以会遇到的，但目前的工作中基本上没遇到。unicodedata.normalize()可以将不同的unicode编码转成相同的？
2.10 在正则式中使用 Unicode
	例：arabic = re.compile('[\u0600-\u06ff\u0750-\u077f\u08a0-\u08ff]+')
	讨论：最好不要用正则匹配unicode了。。。
2.11 删除字符串中不需要的字符
	例：strip(),lstrip(),rstrip(),replace()
	讨论：这是常用的方法，re.sub()也不错。Re.sub(“正则”，替换的字符，原字符)
2.12 审查清理文本字符串
	例：remap = {
      ... ord('\t') : ' ',
      ... ord('\f') : ' ',
      ... ord('\r') : None # Deleted
      ... }
      >>> a = s.translate(remap)
	讨论：str.translate应该是遍历字符串的每个值然后更换。吧replace()封装到函数里，速度会更快一些。
2.13 字符串对齐
	例：str.ljust(), str.rjust(),str.center()。 Format(str, “>20”)右对齐，Format(str, “<20”)左对齐，Format(str, “^20”)居中
	讨论：“str”.format()很强大
2.14 合并拼接字符串
	例：””.join()
	讨论：也可以用生成器
2.15 字符串中插入变量
	例：
        >>> s = '{name} has {n} messages.'
        >>> s.format(name='Guido', n=37)
		>>> name = 'Guido'
		>>> n = 37
		>>> s.format_map(vars())
